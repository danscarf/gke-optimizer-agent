apiVersion: apps/v1
kind: Deployment
metadata:
  name: gke-optimizer-agent
  namespace: gke-optimizer
  labels:
    app: gke-optimizer-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gke-optimizer-agent
  template:
    metadata:
      labels:
        app: gke-optimizer-agent
    spec:
      serviceAccountName: gke-optimizer-sa
      containers:
      - name: gke-optimizer-agent
        image: gcr.io/your-project/gke-optimizer-agent:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: SLACK_BOT_TOKEN
          valueFrom:
            secretKeyRef:
              name: gke-optimizer-secrets
              key: slack-bot-token
        - name: SLACK_SIGNING_SECRET
          valueFrom:
            secretKeyRef:
              name: gke-optimizer-secrets
              key: slack-signing-secret
        - name: GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: gke-optimizer-config
              key: gcp-project-id
        - name: K8S_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: gke-optimizer-config
              key: k8s-cluster-name
        - name: K8S_LOCATION
          valueFrom:
            configMapKeyRef:
              name: gke-optimizer-config
              key: k8s-location
        - name: JIRA_URL
          valueFrom:
            configMapKeyRef:
              name: gke-optimizer-config
              key: jira-url
        - name: JIRA_USERNAME
          valueFrom:
            secretKeyRef:
              name: gke-optimizer-secrets
              key: jira-username
        - name: JIRA_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: gke-optimizer-secrets
              key: jira-api-token
        - name: JIRA_PROJECT
          valueFrom:
            configMapKeyRef:
              name: gke-optimizer-config
              key: jira-project
        - name: NOTIFICATION_CHANNEL
          valueFrom:
            configMapKeyRef:
              name: gke-optimizer-config
              key: notification-channel
        - name: GOOGLE_GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: gke-optimizer-secrets
              key: google-gemini-api-key
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: gke-optimizer-agent
  namespace: gke-optimizer
spec:
  selector:
    app: gke-optimizer-agent
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gke-optimizer-agent
  namespace: gke-optimizer
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "gke-optimizer-agent-ip"
    networking.gke.io/managed-certificates: "gke-optimizer-cert"
spec:
  rules:
  - host: optimizer.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gke-optimizer-agent
            port:
              number: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gke-optimizer-sa
  namespace: gke-optimizer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gke-optimizer-config
  namespace: gke-optimizer
data:
  gcp-project-id: "your-project-id"
  k8s-cluster-name: "your-cluster-name"
  k8s-location: "your-cluster-location"
  jira-url: "https://your-org.atlassian.net"
  jira-project: "OPS"
  notification-channel: "resource-optimization"
---
# Note: In a real-world scenario, you would create the Secret using kubectl or another secure method
# This is just for illustration
apiVersion: v1
kind: Secret
metadata:
  name: gke-optimizer-secrets
  namespace: gke-optimizer
type: Opaque
data:
  slack-bot-token: "eW91ci1zbGFjay1ib3QtdG9rZW4="  # Base64 encoded placeholder
  slack-signing-secret: "eW91ci1zbGFjay1zaWduaW5nLXNlY3JldA=="  # Base64 encoded placeholder
  jira-username: "eW91ci1qaXJhLXVzZXJuYW1l"  # Base64 encoded placeholder
  jira-api-token: "eW91ci1qaXJhLWFwaS10b2tlbg=="  # Base64 encoded placeholder
  google-gemini-api-key: "eW91ci1nZW1pbmktYXBpLWtleQ=="  # Base64 encoded placeholder 